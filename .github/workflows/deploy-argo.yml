name: Deploy Argo CD HA (NodePort - OIDC)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write   # Obligatoire pour OIDC.
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      NEW_PASS: ${{ secrets.NEW_PASS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsECRRole
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
          # Test connectivity
          kubectl get ns

      - name: Deploy Argo CD via Helm (HA LoadBalancer)
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --create-namespace \
            -f helm/values-ha.yaml \
            --set server.service.type=LoadBalancer

      - name: Reset Argo CD admin password
        run: |
          sudo apt-get update && sudo apt-get install -y apache2-utils

          # Génération hash bcrypt du mot de passe
          NEW_HASH=$(htpasswd -bnBC 10 "" "$NEW_PASS" | tr -d ':\n' | sed 's/$2y/$2a/')

          # Vérifier si le secret existe, sinon créer
          if kubectl get secret argocd-secret -n argocd >/dev/null 2>&1; then
            kubectl -n argocd patch secret argocd-secret \
              -p "{\"stringData\": {\"admin.password\": \"${NEW_HASH}\", \"admin.passwordMtime\": \"$(date +%FT%T%Z)\"}}"
          else
            kubectl -n argocd create secret generic argocd-secret \
              --from-literal=admin.password="$NEW_HASH" \
              --from-literal=admin.passwordMtime="$(date +%FT%T%Z)"
          fi

          # Redémarrage du serveur Argo CD
          kubectl -n argocd rollout restart deployment argocd-server

          echo "✅ Argo CD admin password reset to: $NEW_PASS"