name: Deploy Argo CD HA (NodePort - OIDC)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write   # Obligatoire pour OIDC.
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsECRRole
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl via curl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --name $EKS_CLUSTER_NAME \
            --region $AWS_REGION

      - name: Ensure argocd namespace exists
        run: |
          if ! kubectl get ns argocd >/dev/null 2>&1; then
            kubectl create namespace argocd
          else
            echo "Namespace argocd already exists"
          fi

      - name: Deploy Argo CD via Helm (HA NodePort)
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd \
            -n argocd \
            -f helm/values-ha.yaml \
            --set server.service.type=LoadBalancer \
#            --set server.service.nodePortHttp=80 \
#            --set server.service.nodePortHttps=443

#      - name: Show Argo CD service (NodePort)
#        run: |
#          kubectl get svc -n argocd argocd-server -o wide

      - name: Verify Argo CD pods
        run: |
          kubectl get pods -n argocd -o wide

#      - name: Optional - Get Argo CD admin password
#        run: |
#          echo "Admin password:"
#          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode
#          echo
        
